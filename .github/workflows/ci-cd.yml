name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/gestion-even-stat

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Application

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint --if-present

    - name: Run tests
      run: npm run test -- --watch=false --browsers=ChromeHeadless

    - name: Build application
      run: npm run build --prod

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    name: Build and Push Docker Image

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/gestion-even-stat
          docker-compose pull
          docker-compose up -d
          docker image prune -f

  deploy-production:
    needs: [test, build-and-push, security-scan]
    runs-on: ubuntu-latest
    name: Deploy to Production
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/gestion-even-stat
          
          # Backup current version
          docker-compose -f docker-compose.prod.yml down
          
          # Pull latest image
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          
          # Deploy new version
          docker-compose -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          # Health check
          sleep 30
          curl -f http://localhost:80/ || exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "üöÄ Production deployment successful!"
        # Ici vous pourriez ajouter des notifications Slack, Discord, etc.

  rollback:
    runs-on: ubuntu-latest
    name: Rollback Production
    if: failure() && github.ref == 'refs/heads/master'

    steps:
    - name: Rollback to previous version
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/gestion-even-stat
          
          # Rollback to previous image
          docker-compose -f docker-compose.prod.yml down
          docker pull ${{ env.DOCKER_IMAGE }}:previous
          
          # Update docker-compose to use previous tag
          sed -i 's/:latest/:previous/g' docker-compose.prod.yml
          docker-compose -f docker-compose.prod.yml up -d
          
          echo "‚ùå Rollback completed"
